/**
 * DataStructures.ts
 * Clases para manejar comprobantes, respuestas y utilidades
 * Proporciona m√©todos helper para formatear y presentar datos
 */

import { Invoice, ProcessingResult } from './Interfaces';

/**
 * Clase InvoiceResponse
 * Gestiona el formateo y presentaci√≥n de facturas procesadas
 */
export class InvoiceResponse {
  private invoice: Invoice;

  constructor(invoice: Invoice) {
    this.invoice = invoice;
  }

  /**
   * Genera un resumen legible para enviar al usuario
   * @returns String con resumen formateado
   */
  toReadableSummary(): string {
    const { invoice } = this;
    const confidenceEmoji = {
      high: 'üü¢',
      medium: 'üü°',
      low: 'üî¥',
    };

    const summary = `
‚úÖ **Comprobante procesado exitosamente**

üìÑ **Informaci√≥n General**
‚Ä¢ N√∫mero: ${invoice.invoiceNumber}
‚Ä¢ Fecha: ${this.formatDate(invoice.date)}
‚Ä¢ Moneda: ${invoice.currency}
‚Ä¢ Confianza: ${confidenceEmoji[invoice.metadata.confidence]} ${invoice.metadata.confidence.toUpperCase()}

üè¢ **Proveedor**
‚Ä¢ Nombre: ${invoice.vendor.name}
${invoice.vendor.taxId ? `‚Ä¢ ID Fiscal: ${invoice.vendor.taxId}` : ''}
${invoice.vendor.address ? `‚Ä¢ Direcci√≥n: ${invoice.vendor.address}` : ''}

üí∞ **Montos**
‚Ä¢ Total: ${this.formatCurrency(invoice.totalAmount, invoice.currency)}
${invoice.taxes ? `‚Ä¢ IVA: ${this.formatCurrency(invoice.taxes.iva, invoice.currency)}` : ''}
${invoice.taxes && invoice.taxes.otherTaxes > 0 ? `‚Ä¢ Otros impuestos: ${this.formatCurrency(invoice.taxes.otherTaxes, invoice.currency)}` : ''}

üì¶ **Items** (${invoice.items.length})
${this.formatItems()}

${invoice.paymentMethod ? `üí≥ **M√©todo de pago:** ${invoice.paymentMethod}` : ''}

‚è±Ô∏è **Procesamiento**
‚Ä¢ Tiempo: ${invoice.metadata.processingTimeMs}ms
‚Ä¢ Modelo: ${invoice.metadata.model || 'N/A'}
    `.trim();

    return summary;
  }

  /**
   * Genera JSON bonito para adjuntar como archivo
   * @returns String con JSON formateado
   */
  toPrettyJSON(): string {
    return JSON.stringify(this.invoice, null, 2);
  }

  /**
   * Genera JSON minificado
   * @returns String con JSON minificado
   */
  toMinifiedJSON(): string {
    return JSON.stringify(this.invoice);
  }

  /**
   * Formatea items de la factura
   * @returns String con items formateados
   */
  private formatItems(): string {
    return this.invoice.items
      .map((item, index) => {
        return `${index + 1}. ${item.description}
   ‚Ä¢ Cantidad: ${item.quantity} x ${this.formatCurrency(item.unitPrice, this.invoice.currency)}
   ‚Ä¢ Subtotal: ${this.formatCurrency(item.subtotal, this.invoice.currency)}`;
      })
      .join('\n');
  }

  /**
   * Formatea fecha de YYYY-MM-DD a formato legible
   * @param dateString Fecha en formato YYYY-MM-DD
   * @returns Fecha formateada
   */
  private formatDate(dateString: string): string {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('es-AR', {
        day: '2-digit',
        month: 'long',
        year: 'numeric',
      });
    } catch {
      return dateString;
    }
  }

  /**
   * Formatea moneda seg√∫n el c√≥digo
   * @param amount Monto
   * @param currency C√≥digo de moneda (ISO 4217)
   * @returns String formateado
   */
  private formatCurrency(amount: number, currency: string): string {
    const symbols: Record<string, string> = {
      ARS: '$',
      USD: 'USD $',
      EUR: '‚Ç¨',
      BRL: 'R$',
      CLP: '$',
      MXN: '$',
      COP: '$',
    };

    const symbol = symbols[currency] || currency;
    return `${symbol}${amount.toLocaleString('es-AR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  }

  /**
   * Obtiene la factura original
   * @returns Invoice object
   */
  getInvoice(): Invoice {
    return this.invoice;
  }
}

/**
 * Clase ProcessingResultFormatter
 * Maneja el formateo de resultados de procesamiento (√©xito o error)
 */
export class ProcessingResultFormatter {
  /**
   * Formatea un resultado de procesamiento para el usuario
   * @param result Resultado del procesamiento
   * @returns String formateado para Telegram
   */
  static format(result: ProcessingResult): string {
    if (result.success && result.invoice) {
      const invoiceResponse = new InvoiceResponse(result.invoice);
      return invoiceResponse.toReadableSummary();
    }

    // Formatear error
    return this.formatError(result.error || 'Error desconocido');
  }

  /**
   * Formatea un mensaje de error amigable
   * @param errorMessage Mensaje de error t√©cnico
   * @returns Mensaje formateado para el usuario
   */
  static formatError(errorMessage: string): string {
    // Mapear errores t√©cnicos a mensajes amigables
    const friendlyMessages: Record<string, string> = {
      'imagen no existe': '‚ùå No se pudo encontrar la imagen. Por favor, intenta enviarla nuevamente.',
      'API Key': '‚ùå Error de configuraci√≥n del servidor. Por favor, contacta al administrador.',
      'validaci√≥n': '‚ö†Ô∏è No se pudo extraer toda la informaci√≥n del comprobante. Por favor, verifica que la imagen sea clara y legible.',
      'rate limit': '‚è∏Ô∏è Se ha alcanzado el l√≠mite de procesamiento. Por favor, intenta nuevamente en unos minutos.',
      'timeout': '‚è±Ô∏è El procesamiento est√° tomando m√°s tiempo de lo esperado. Por favor, intenta nuevamente.',
    };

    // Buscar mensaje amigable basado en keywords
    for (const [keyword, friendlyMsg] of Object.entries(friendlyMessages)) {
      if (errorMessage.toLowerCase().includes(keyword)) {
        return friendlyMsg;
      }
    }

    // Mensaje gen√©rico si no hay match
    return `‚ùå **Error al procesar el comprobante**

${errorMessage}

üí° **Sugerencias:**
‚Ä¢ Aseg√∫rate de que la imagen sea clara y legible
‚Ä¢ Verifica que el comprobante est√© completo en la imagen
‚Ä¢ Intenta con mejor iluminaci√≥n si la foto est√° oscura
‚Ä¢ Evita sombras o reflejos en el documento`;
  }

  /**
   * Genera un mensaje de bienvenida
   * @returns Mensaje de bienvenida
   */
  static welcomeMessage(): string {
    return `
üëã **¬°Bienvenido al Bot de Procesamiento de Comprobantes!**

üì∏ **¬øC√≥mo funciona?**
1. Env√≠ame una foto o documento de tu factura o comprobante
2. Procesar√© el archivo con IA
3. Acumular√© las facturas en tu sesi√≥n
4. Descarga todas las facturas en un Excel profesional

‚úÖ **Formatos soportados:**
‚Ä¢ Im√°genes: JPG, PNG, GIF, WEBP, BMP, TIFF
‚Ä¢ Documentos: PDF, DOCX, DOC, XLSX, XLS, PPTX, PPT

üöÄ **Comandos disponibles:**
‚Ä¢ /start - Ver este mensaje
‚Ä¢ /help - Ayuda detallada
‚Ä¢ /facturas - Ver facturas acumuladas
‚Ä¢ /limpiar - Limpiar sesi√≥n

¬°Env√≠a una imagen o documento para comenzar!
    `.trim();
  }

  /**
   * Genera un mensaje de ayuda
   * @returns Mensaje de ayuda
   */
  static helpMessage(): string {
    return `
üìñ **Ayuda - Bot de Procesamiento de Comprobantes**

**¬øQu√© hace este bot?**
Extrae autom√°ticamente informaci√≥n de facturas y comprobantes usando IA avanzada y genera archivos Excel profesionales.

**Informaci√≥n extra√≠da:**
‚Ä¢ Fecha de la operaci√≥n
‚Ä¢ Tipo de operaci√≥n (Transferencia, etc.)
‚Ä¢ CUIT del proveedor
‚Ä¢ Monto bruto
‚Ä¢ Banco receptor

**¬øC√≥mo funciona?**
1. Env√≠a una o varias im√°genes de facturas
2. El bot las procesa y acumula en tu sesi√≥n
3. Presiona el bot√≥n "Descargar Excel" para obtener todas las facturas en un archivo
4. Puedes seguir agregando facturas antes de descargar

**Comandos √∫tiles:**
‚Ä¢ /facturas - Ver cu√°ntas facturas tienes acumuladas
‚Ä¢ /limpiar - Borrar todas las facturas y empezar de nuevo
‚Ä¢ /stats - Ver estad√≠sticas del sistema

**Consejos para mejores resultados:**
‚úì Toma la foto con buena iluminaci√≥n
‚úì Aseg√∫rate de que todo el comprobante sea visible
‚úì Evita sombras, reflejos o desenfoques
‚úì Las im√°genes y documentos deben ser claros y legibles
‚úì Screenshots tambi√©n son aceptados

**Formatos aceptados:**
‚Ä¢ **Im√°genes:** JPG, PNG, GIF, WEBP, BMP, TIFF (ideal para fotos y screenshots)
‚Ä¢ **Documentos:** PDF, DOCX, DOC (el bot extraer√° autom√°ticamente el contenido)
‚Ä¢ **Hojas de c√°lculo:** XLSX, XLS (si contienen facturas escaneadas)
‚Ä¢ **Presentaciones:** PPTX, PPT (si contienen facturas escaneadas)

**Limitaciones:**
‚Ä¢ M√°ximo 10MB por archivo
‚Ä¢ El bot puede tardar 5-20 segundos en procesar seg√∫n el formato

**Privacidad:**
‚Ä¢ Las im√°genes se eliminan despu√©s del procesamiento
‚Ä¢ Las facturas en sesi√≥n expiran despu√©s de 30 minutos de inactividad
‚Ä¢ No almacenamos datos sensibles sin tu consentimiento

¬øNecesitas m√°s ayuda? Contacta al administrador.
    `.trim();
  }
}

/**
 * Clase Logger
 * Utilidad para logging consistente
 */
export class Logger {
  private context: string;

  constructor(context: string) {
    this.context = context;
  }

  info(message: string, ...args: any[]): void {
    console.log(`[${this.context}] ‚ÑπÔ∏è  ${message}`, ...args);
  }

  success(message: string, ...args: any[]): void {
    console.log(`[${this.context}] ‚úÖ ${message}`, ...args);
  }

  error(message: string, ...args: any[]): void {
    console.error(`[${this.context}] ‚ùå ${message}`, ...args);
  }

  warn(message: string, ...args: any[]): void {
    console.warn(`[${this.context}] ‚ö†Ô∏è  ${message}`, ...args);
  }

  debug(message: string, ...args: any[]): void {
    if (process.env.LOG_LEVEL === 'debug') {
      console.debug(`[${this.context}] üêõ ${message}`, ...args);
    }
  }
}
